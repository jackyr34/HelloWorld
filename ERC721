// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

contract ERC721 is Context, ERC165, IERC721, IERC721Metadata{
    using Address for address;
    using Strings for uint256;

    string private _name;
    string private _symbol;
    mapping(uint256 => address) private _owners;
    mapping(address => uint256) private _balances;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;
    // Mapping from owner to operator approvals

    constructor(string memory name_, string memory symbol_){
        _name = name_;
        _symbol = symbol_;
    }
        function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
            //A function that allows an inheriting contract to override its behavior will be marked at virtual. 
            //The function that overrides that base function should be marked as override. 
            //All functions in interface contracts are automatically considered virtual
    }
        function balanceOf(address owner) public view virtual overrider returns (uint256){
        require(owner !=address(0), "ERC721:address zero is not a valid owner");
        return _balances[owner];
    }

        function name() public view virtual override returns (string memory) {
        return _names;
        }
        function symbol() public view virtual override returns (string memory) {
        return _symbol;
        }
        function tokenURI(uint256 tokenId) public view virtual override returns (string memory){
            _requireMinted(tokenId);

            string memory baseURI = _baseURI();
            return bytes(baseURI).length > 0 ? string(abi.encodePacjed(baseURI,tokenId.toString())) : "";
        }
        function _baseURI() internal view virtual returns (string memory){
            return ""; // Default is empty
        }
        function approve(address to, uint256 tokenId) public virtual override{
            address owner = ERC721.ownerOf(tokenId);
            require(to != owner, "ERC721: approval to current owner");

            require(
                _msgSender() ==owner || isApprovedForAll(owner, _msgSender()),
                "ERC721:approve caller is not token owner or approved for all"
            );

            _approve(to,tokenId);
            //Where is _msgSender??????????
        }
        function getApproved(uint256 tokenId) public view virtual override returns (address){
            _requireMinted(tokenId);

            return _tokenkApprovals[tokenId];
        }
        function setApprovalForAll(address operator, bool approved) public virtual override{
            _setApprovalForAll(_msgSender(), operator, approved);
        }

        function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
            return _operatorApprovals[owner][operator];
        }
        function transferFrom(
            address from,
            address to,
            uint256 tokenId
        ) public virtual override{
            require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");

            _transfer(from, to, tokenId);
        
        }
        function safeTransferFrom(
            address from,
            address to,
            uint256 tokenId
        )public virtual override{
            safeTransferFrom(from, to, tokenId, "");
        }
        
        function safeTransferFrom(
            address from,
            address to,
            uint256 tokenId,
            bytes memory data
        ) public virtual override{
            require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
            _safeTransfer(from, to, tokenId, data);
        }
        
        function _safeTransfer(
            address from,
            address to,
            uint256 memory data)
            internal virtual {
                _transfer(from, to, tokenId);
                require(_checkOnERC721Received(from, to, tokenId, data), "ERC721:transfer to non ERC721Receiver implementer");
        }
        
        function _exists(uint256 tokenId) internal view virtual returns (bool){
            return _owners[tokenId] != address(0); //return true if LHS not equals to RHS
        }
        
        function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
            address owner = ERC721.ownerOf(tokenId);
            return (spender == owner || isApprovedForALl(owner, spender) || getApproved(tokenId) == spender);
        } //Return true if one of these pass

        function _safeMint(address to, uint256 tokenId) internal virtual {
            _safeMint(to, tokenId, "");
        }
        function _safeMint(
            address to,
            uint256 tokenId,
            bytes memory data
        ) internal virtual{
            _mint(to, tokenId);
            require(
                _checkOnERC721Received(address(0), to, tokenId, data),
                "ERC721: transfer to non ERC721Receiver implementer"
            );
        }
        function _mint(address to, uint256 tokenId) internal virtual{
            require(to != address(0), "ERC721: mint to the zero address");
            require(!_exists(tokenId), "ERC721: token already minted");

            _beforeTokenTransfer(address(0), to, tokenId);

            _balances[to] += 1;
            _owners[tokenId] = to;

            emit Transfer(address(0), to, tokenId);

            _afterTokenTransfer(address(0), to, tokenId);
        }
        function _burn(uint256 tokenId) internal virtual {
            address owner = ERC721.ownerOf(tokenId);

            _beforeTokenTransfer(owner, address(0), tokenId);
            
            delete _tokenApprovals[tokenId]; //Clear approvals

            _balances[owner] -= 1;
            delete _owners[tokenId];

            emit Transfer(owner, address(0), tokenId);

            _afterTokenTransfer(owner, address(0), tokenId);

            //This function is internal, which holders cannot call. If u want to enable this function.
            //add ERC721Burnable.sol extension when deploying as it enable the _burn function.
        }
        function _transfer(
            address from,
            address to,
            uint256 tokenId) internal virtual{
             require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
             require(to != address(0), "ERC721: transfer to the zero address");

             _beforeTokenTransfer(from, to, tokenId);

             delete _tokenApprovals[tokenId];

             _balances[from] -= 1;
             _balances[to] += 1;
             _owners[tokenId] =to;

             emit Transfer(from, to, tokenId);  
         }

         function _approve(address to, uint256 tokenId) internal virtual{
             _tokenApprovals[tokenId] = to;
             emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
         }
        function _setApprovalForAll(
            address owner,
            address operator,
            bool approved)
            internal virtual{
                require(owner != operator, "ERC721: approve to caller");
                _operatorApprovals[owner][operator] = approved;
                emit ApprovalForAll(owner, operator, approved);
            
            }

            function _requireMinted(uint256 tokenId) internal view virtual{
                require(_exists(tokenId), "ERC721: invalid token ID");
            
            }

             function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                                  }
                }
            }
        } else {
            return true;
        }
    }

      function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

      function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

