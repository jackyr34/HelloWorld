// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import "@openzeppelin/contracts/utils/Context.sol";

/*By default, the owner account will be the one that deploys the contract. This
can later be changed with {transferOwnership}.

Most important: onlyOwner, means owner of the contract. By the function, u can
check the owner of the contract. This module is used through inheritance. It will make available the modifier
onlyOwner`, which can be applied to your functions to restrict their use to
the owner.
*/

abstract contract Ownable is Context{
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender()); //Initializes the contract setting the deployer as the initial owner.
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function _checkOwner() internal view virtual { //Throws if the sender is not the owner
        require(owner() ==_msgSender(), "Ownable: caller is not the owner");
    }
    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner{
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
